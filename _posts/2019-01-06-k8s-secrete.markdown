---
layout: post
title: k8s secrets guide
date: 2019-01-06
categories: Kubernetes
tags: [A kubernetes, secrets]
author: himang10
description: secrets 사용에 대한 설명
---
Secrets Usage
============

# Table of Contents
1. [Secrets](#secrets-introduction)
2. [Secret Creation Step](#secret-creation-step)
3. [Secret Usage in Pod](#secret-usage-in-pod)
4. [Pod fortune-https secret mount](#pod-fortune-https-secret-mount)
5. [PullImageSecret](#pullimagesecret)
6. [Ambassador](#ambassador)
6. [고려사항](#고려사항)


## Secrets introduction
중요한 정보를 저장하고 분류하기 위해 쿠버네티스는 시크릿이라고 하는 별도의 객체를 제공
시크릿은 configmap과 매우 유사하나 resource를 etcd에 저장 시 암호화해서 저장하며 
* 환경 변수로 시크릿 엔트리를 컨테이너에 전달
* 볼륨의 파일로서 시크릿 엔트리를 노출

```yaml
volumes:
    default-token-cfee9:
        Type: Secret (a volume populated by a secret)
        SecretName: default-token-cfee9
```
아래 항목은 포드에서 kube API Server와 안전하게 통신하기 위해 필요한 모든 것 

```config
$ kubectl describe secret default-token-6ln6s
Name:         default-token-6ln6s
Namespace:    default
Labels:       <none>
Annotations:  kubernetes.io/service-account.name=default
              kubernetes.io/service-account.uid=47d348be-0bf5-11e9-81dc-fa163e26d271

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     2004 bytes
namespace:  7 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3Vud
```

## Secret Creation Step
1. Secrets 생성

```config
$ openssl genrsa -out https.key 2048
Generating RSA private key, 2048 bit long modulus
.......+++
.........................................................................................+++
e is 65537 (0x10001)

$ openssl req -new -x509 -key https.key -out https.cert -days 3650 -subj /CN=www.kubia-example.com

$ echo bar > foo

$ kubectl create secret generic fortune-https --from-file=https.key --from-file=https.cert --from-file=foo
secret "fortune-https" created
```

2. Configmap 과 Secret 비교

```yaml
$ kubectl get secret fortune-https -o yaml
apiVersion: v1
data:
  foo: YmFyCg==
  https.cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN2RENDQWFRQ0NRQzl4QitqQm9KR1pqQU5CZ2txaGtpRzl3MEJBUXNGQURBZ01SNHdIQVlEVlFRRERCVjMKZDNjdWEzVmlhV0V0WlhoaGJYQnNaUzVqYjIwd0hoY05NVGt3TVRBMk1EZzBNalV4V2hjTk1qa3dNVEF6TURnMApNalV4V2pBZ01SNHdIQVlEVlFRRERCVjNkM2N1YTNWaWFXRXRaWGhoYlhCc1pTNWpiMjB3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN5ekQrR241WXlUbkN2K0VTY0ludEovcStMd1A1MTZqb28KWms4ODF2UWJsQzQxU0xtNlp5b1ZrSmtuOGdkTVhPY2hVd0tleXRoczRxVmRYRGo0NzdUVmNGZzkrRmozUlh1eAo0Z0lWenRIK0ZEdDJyeExsVzdVVWE1ZndkUVZjbU5MSzhLV2U4TUYzSTlqalZ3L0plcmZmTEdQN3ZkVmJwRFlpCnNiWGdtUUs0eTcxTTN3RkdRaXVvaUV3c2puQXlScTJad2Nha0FDc3RBaGZJYVAyM2VLamFQUmYvd2FHMllEM00KeUhZbjd4YlUrVUZOMXVuNUZ6TGtBZUJ6aWVMcmJBbFA3eTJKT0FDcytHUHdZakx0TTZOdEhZOHNhUjFtTmV2KwprZ2ZqVnhKT0dTeXFPRTNIWUJjNks4cHJnUmZaT1FWUStqS0xXc29IUVZybTIxM1hDOUQ5QWdNQkFBRXdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUtUVkxhc09Ka1RHWjhEZXFOZXpKWmlEdXV2VWJ2UlRBdmhQR2ZOekUwRXcKNmppOVRrblo1Z0h0cithbWdVckJ4c1NmemhONnFyMDFmT0x1UHNBdlVidUJMZTNuMEZTeVBOT2tmcmsyUTVCQQpSem44Umx1VVBCRk1DdkdkakVFckorZ3lzcTlyTC9MUGxaRDAveEhSU3llRWMyNFJWZ3E0aHNob1h1ZFNmNThNCm56dXlXdElWNmZUa2tYN05YQndsUy9ZSlMvbkZYRVdlR2E0UTRwQ2trSjZSblZBZjNqWXQ5NkF4Z1dEeGVCbU8KdldUaGhNMFg5a3ZlcGJiTFc1RmlkSkk5a1g4aDRXNllnT1R0cnFlQi9GYUNUL1dVcjZmUk5NcXhmTWhqVXhjWgp1WVlGZnN6YnJVa29RNUZZd2Q0Qmd3TWxSOTFUVEE3cWdVc2x4NDZXZjBnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  https.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc3N3L2hwK1dNazV3ci9oRW5DSjdTZjZ2aThEK2RlbzZLR1pQUE5iMEc1UXVOVWk1CnVtY3FGWkNaSi9JSFRGem5JVk1DbnNyWWJPS2xYVnc0K08rMDFYQllQZmhZOTBWN3NlSUNGYzdSL2hRN2RxOFMKNVZ1MUZHdVg4SFVGWEpqU3l2Q2xudkRCZHlQWTQxY1B5WHEzM3l4ais3M1ZXNlEySXJHMTRKa0N1TXU5VE44QgpSa0lycUloTUxJNXdNa2F0bWNIR3BBQXJMUUlYeUdqOXQzaW8yajBYLzhHaHRtQTl6TWgySis4VzFQbEJUZGJwCitSY3k1QUhnYzRuaTYyd0pUKzh0aVRnQXJQaGo4R0l5N1RPamJSMlBMR2tkWmpYci9wSUg0MWNTVGhrc3FqaE4KeDJBWE9pdkthNEVYMlRrRlVQb3lpMXJLQjBGYTV0dGQxd3ZRL1FJREFRQUJBb0lCQVFDeVgwdDgzWmEweDBacQpkMDdUU1I4Z09jSWR0VUxtbGU3QlFSZ0p4UlF3czByS0E2eXVScDlZZGpJbEJMSzlQdTJpZERMb0FjdWFEUjRXCkhwd0QxUGZkK3o4OVM1Wk4wWGJPaG4rNEMrVzVDYXd0QWduaTRQT3MxSTMyNkhlWjRpaGhKMlREUk1KdFBrancKdkhsV2NtUWZkQ1NuRDhKYnMxNENqTEc2eUV0TDJPSyt1WnU5Q2R4U2xPaEpOenBSQWZQdUVXY0h0aWtjNEV5bgpJRklzQlVTMDR4d2l0V0cwRnhudHkxbWQ3L0xERGk1Q0hnN3ZvR2RydnJoTVlnMEx0c1F6RGZMNTdwTGxjTFIrCkYrK3FreGxTa2RkRExyak9qWHhUOFVXQVhEOHhKTW81VUxrN2h6QUpNdHJ3VGZVWW5aazRJWGUvYys0SW1TUXAKTnhGbmhSUXRBb0dCQU9CQ0NLR0hiNS9EdTFMQXd6MFdkMEkxVnZHUlI3ZVJGaGUyZndLMmpnbWVwV0k2cXZGSgpRekJFVWl4UWRiVlkxTVJXaG92V2tJMTVZcHJWQTRGRml3TUEzcEkyQWlPbjlSYkx0REJuOHZveDY3cDhvejk4CnJCYW1rb21kNk0xN0VsN2tBOUR6ejFpcGNPMUJ5VEhsMU1Rc3AveHNqdGhKcXFKT2dhdlQ1b1l6QW9HQkFNd2EKK01vZWxPMDVTZVl4QnhyWTRxRVY1L2E4L1ZxQXJ4aXFZVkgyT2JWajJrVU1CUjVnTm0vaUhVcUxuT0pJSHd4YgoxZW53ZlFLSTJtOWx0Nk1LdFVMbDdjMDRpaW83djlkZGtnYlJWL2R4NGNkaXNqY0dOK2ZieDY4SlV5RFcyU0xCCmpibE83d1VWQ2hUOVhDVCsvWlVrYzVwMW9OY245dlFhQmZxMGtqd1BBb0dBVUphS1FYbkpIREdiWEdhWEFwblQKSzRDOWlMdTdlUFR6YW53VGNtY2w3Y0VNRDV1am1HZktkRXJvK0xIRlN2RHNMTTRuTlpOYWlPeUpDYmpvdElqSQpKc0VtT29hY0NESXdPZ3ZqNmMxQkhMWFp6ejlBN3V5ZmJ0aFhLb3NMZ09Qc094dFhYN3h0MDUrNFRCcHE4YnAwCjFqWngrNTBMVENCVTZGU3I5cEtFY2M4Q2dZQlVHWmtCejNBVi8xRVA1SXZFNkRFWnB1a1pwZTNPNk04OUhwZFQKS2wzRS9Bdm4vM2ZzZUVCMkFYbUlTZGF1OW9DMG12S2RubFlrUVRlZ1J3MVB4UTNETHZLNWFONmxZRkUvOEhKSApGT05tTmlxTitZRHRZMGFONXVWMG5pYitsUWlMWmExNythWkxOY3dkc2ZmUjFxK3VVSUxCMWs0YjJYL01QUnpSCm5LM1V5UUtCZ0huVEFGOUEyaU1XdnAzb3hIMnlrYUczczArZVVWcGFVN3I2MVFOb1BMdVlNN3BZMVVJUStPcE0KQ2laSnRTUHNHcnFKeFZIcC9Sc3I4VkVlakVvdEdrcWpWU3BuRkhSOU1La05mSnVJejFLbXlSaGIxc0xsM2V2TwpwRmtMRjJIUFlUbGp0c3NIWXhoTjdwTmd0VWYvU0pGenk2MmdjMHFsdFJGMW01OGxEU3dBCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  creationTimestamp: 2019-01-06T08:45:55Z
  name: fortune-https
  namespace: default
  resourceVersion: "904038"
  selfLink: /api/v1/namespaces/default/secrets/fortune-https
  uid: 7afc4f3c-118f-11e9-a6b2-fa163e26d271
type: Opaque
```
*** configmap contents ***
```yaml
$ kubectl get configmap fortune-config-key -o yaml
apiVersion: v1
data:
  foo: |
    bar
  https.cert: |
    -----BEGIN CERTIFICATE-----
    MIICvDCCAaQCCQC9xB+jBoJGZjANBgkqhkiG9w0BAQsFADAgMR4wHAYDVQQDDBV3
    d3cua3ViaWEtZXhhbXBsZS5jb20wHhcNMTkwMTA2MDg0MjUxWhcNMjkwMTAzMDg0
    MjUxWjAgMR4wHAYDVQQDDBV3d3cua3ViaWEtZXhhbXBsZS5jb20wggEiMA0GCSqG
    SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCyzD+Gn5YyTnCv+EScIntJ/q+LwP516joo
    Zk881vQblC41SLm6ZyoVkJkn8gdMXOchUwKeyths4qVdXDj477TVcFg9+Fj3RXux
    4gIVztH+FDt2rxLlW7UUa5fwdQVcmNLK8KWe8MF3I9jjVw/JerffLGP7vdVbpDYi
    sbXgmQK4y71M3wFGQiuoiEwsjnAyRq2ZwcakACstAhfIaP23eKjaPRf/waG2YD3M
    yHYn7xbU+UFN1un5FzLkAeBzieLrbAlP7y2JOACs+GPwYjLtM6NtHY8saR1mNev+
    kgfjVxJOGSyqOE3HYBc6K8prgRfZOQVQ+jKLWsoHQVrm213XC9D9AgMBAAEwDQYJ
    KoZIhvcNAQELBQADggEBAKTVLasOJkTGZ8DeqNezJZiDuuvUbvRTAvhPGfNzE0Ew
    6ji9TknZ5gHtr+amgUrBxsSfzhN6qr01fOLuPsAvUbuBLe3n0FSyPNOkfrk2Q5BA
    Rzn8RluUPBFMCvGdjEErJ+gysq9rL/LPlZD0/xHRSyeEc24RVgq4hshoXudSf58M
    nzuyWtIV6fTkkX7NXBwlS/YJS/nFXEWeGa4Q4pCkkJ6RnVAf3jYt96AxgWDxeBmO
    vWThhM0X9kvepbbLW5FidJI9kX8h4W6YgOTtrqeB/FaCT/WUr6fRNMqxfMhjUxcZ
    uYYFfszbrUkoQ5FYwd4BgwMlR91TTA7qgUslx46Wf0g=
    -----END CERTIFICATE-----
  https.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAssw/hp+WMk5wr/hEnCJ7Sf6vi8D+deo6KGZPPNb0G5QuNUi5
    umcqFZCZJ/IHTFznIVMCnsrYbOKlXVw4+O+01XBYPfhY90V7seICFc7R/hQ7dq8S
    5Vu1FGuX8HUFXJjSyvClnvDBdyPY41cPyXq33yxj+73VW6Q2IrG14JkCuMu9TN8B
    RkIrqIhMLI5wMkatmcHGpAArLQIXyGj9t3io2j0X/8GhtmA9zMh2J+8W1PlBTdbp
    +Rcy5AHgc4ni62wJT+8tiTgArPhj8GIy7TOjbR2PLGkdZjXr/pIH41cSThksqjhN
    x2AXOivKa4EX2TkFUPoyi1rKB0Fa5ttd1wvQ/QIDAQABAoIBAQCyX0t83Za0x0Zq
    d07TSR8gOcIdtULmle7BQRgJxRQws0rKA6yuRp9YdjIlBLK9Pu2idDLoAcuaDR4W
    HpwD1Pfd+z89S5ZN0XbOhn+4C+W5CawtAgni4POs1I326HeZ4ihhJ2TDRMJtPkjw
    vHlWcmQfdCSnD8Jbs14CjLG6yEtL2OK+uZu9CdxSlOhJNzpRAfPuEWcHtikc4Eyn
    IFIsBUS04xwitWG0Fxnty1md7/LDDi5CHg7voGdrvrhMYg0LtsQzDfL57pLlcLR+
    F++qkxlSkddDLrjOjXxT8UWAXD8xJMo5ULk7hzAJMtrwTfUYnZk4IXe/c+4ImSQp
    NxFnhRQtAoGBAOBCCKGHb5/Du1LAwz0Wd0I1VvGRR7eRFhe2fwK2jgmepWI6qvFJ
    QzBEUixQdbVY1MRWhovWkI15YprVA4FFiwMA3pI2AiOn9RbLtDBn8vox67p8oz98
    rBamkomd6M17El7kA9Dzz1ipcO1ByTHl1MQsp/xsjthJqqJOgavT5oYzAoGBAMwa
    +MoelO05SeYxBxrY4qEV5/a8/VqArxiqYVH2ObVj2kUMBR5gNm/iHUqLnOJIHwxb
    1enwfQKI2m9lt6MKtULl7c04iio7v9ddkgbRV/dx4cdisjcGN+fbx68JUyDW2SLB
    jblO7wUVChT9XCT+/ZUkc5p1oNcn9vQaBfq0kjwPAoGAUJaKQXnJHDGbXGaXApnT
    K4C9iLu7ePTzanwTcmcl7cEMD5ujmGfKdEro+LHFSvDsLM4nNZNaiOyJCbjotIjI
    JsEmOoacCDIwOgvj6c1BHLXZzz9A7uyfbthXKosLgOPsOxtXX7xt05+4TBpq8bp0
    1jZx+50LTCBU6FSr9pKEcc8CgYBUGZkBz3AV/1EP5IvE6DEZpukZpe3O6M89HpdT
    Kl3E/Avn/3fseEB2AXmISdau9oC0mvKdnlYkQTegRw1PxQ3DLvK5aN6lYFE/8HJH
    FONmNiqN+YDtY0aN5uV0nib+lQiLZa17+aZLNcwdsffR1q+uUILB1k4b2X/MPRzR
    nK3UyQKBgHnTAF9A2iMWvp3oxH2ykaG3s0+eUVpaU7r61QNoPLuYM7pY1UIQ+OpM
    CiZJtSPsGrqJxVHp/Rsr8VEejEotGkqjVSpnFHR9MKkNfJuIz1KmyRhb1sLl3evO
    pFkLF2HPYTljtssHYxhN7pNgtUf/SJFzy62gc0qltRF1m58lDSwA
    -----END RSA PRIVATE KEY-----
kind: ConfigMap
metadata:
  creationTimestamp: 2019-01-06T08:49:36Z
  name: fortune-config-key
  namespace: default
  resourceVersion: "904405"
  selfLink: /api/v1/namespaces/default/configmaps/fortune-config-key
  uid: fec7dd9a-118f-11e9-a6b2-fa163e26d271
  ```
  
***차이점: Base64 인코딩 적용 유무***

### Secret Usage in Pod
> secret 볼륨을 통해 컨테이너에 시크릿을 노출하면 시크릿 엔ㅌ리의 값은 디코딩돼 실제 형식의 파일에 기록된다. 
> 환경 변수를 통해 시크릿 항목을 노출할 때도 마찬가지이다. 두 경우 모두 애플리켕션에서 디코딩 할 필요는 없지만 파일 내용을 읽거나 환경 변수 값을 찾아 직접 사용할 수 있다.

## Pod fortune-https secret mount
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: fortune-https
spec:
  containers:
  - image: luksa/fortune:env
    name: html-generator
    env:
    - name: INTERVAL
      valueFrom:·
        configMapKeyRef:
          name: fortune-config
          key: sleep-interval
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    - name: config
      mountPath: /etc/nginx/conf.d
      readOnly: true
    - name: certs
      mountPath: /etc/nginx/certs/
      readOnly: true
    ports:
    - containerPort: 80
    - containerPort: 443
  ***volumes:***
  - name: html
    emptyDir: {}
  - name: config
    configMap:
      name: fortune-config
      items:
      - key: my-nginx-config.conf
        path: https.conf
  ***- name: certs***
    secret:
      secretName: fortune-https
```
### PullImageSecret
1. docker registry 인증을 위한 secret 생서
```config
$ kubectl create secret docker-registry mydockerhubsecret --docker-username=myusername --docker-password=mypassword --docker-email=my.email@profiver.com
```

2. pod 정의에서 docker registry secret 사용
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: private-pod
spec:
  imagePullSecrets:
  - name: mydockerhubsecret
  containers:
  - image: username/private:tag
    name: main
```
> ServiceAccount에 추가하면 이미지 풀 시크릿이 모든 포드에 자동으로 추가됨


### Ambassador
> Container가 API 서버에 직접 통신하는 대신 main container의 application은 HTTP를 통해 Ambassador (sidecar)에 연결하고 
> 보안 역할을 담당하는 ambassoador proxy가 API 서버에 HTTPS연결 처리하는 구조
*** Ambassador container가 있는 포트 
```yaml
# curl-with-ambassador.yaml

apiVersion: v1
kind: Pod
metadata:
  name: curl-with-ambassador
spec:
  containers:
  - name: main
    image: tutum/curl
    command: ["sleep", "9999999"]
  - name: ambassador
    image: luksa/kubectl-proxy:1.6.2
```
```
$ kubectl create -f curl-with-ambassador.yaml
pod "curl-with-ambassador" created
SKCC18N00029:~ himang10 in ~/ywyi/icp3.1/k8sbook/kubernetes-in-action/Chapter08 on master*
$ kubectl get pod
NAME                               READY     STATUS              RESTARTS   AGE
curl                               1/1       Running             0          53m
curl-with-ambassador               0/2       ContainerCreating   0          2s
fortune                            2/2       Running             0          2d
nfs-provisioner-64bf8f4776-ktrmr   1/1       Running             0          2d
SKCC18N00029:~ himang10 in ~/ywyi/icp3.1/k8sbook/kubernetes-in-action/Chapter08 on master*
$ kubectl get pod
NAME                               READY     STATUS    RESTARTS   AGE
curl                               1/1       Running   0          53m
curl-with-ambassador               2/2       Running   0          8s
fortune                            2/2       Running   0          2d
nfs-provisioner-64bf8f4776-ktrmr   1/1       Running   0          2d
SKCC18N00029:~ himang10 in ~/ywyi/icp3.1/k8sbook/kubernetes-in-action/Chapter08 on master*
$ kubectl exec -it curl-with-ambassador -c main sh
# curl localhost:8001
{
  "paths": [
    "/api",
    "/api/v1",
    "/apis",
    "/apis/",
    "/apis/admissionregistration.k8s.io",
    "/apis/admissionregistration.k8s.io/v1alpha1",
    "/apis/admissionregistration.k8s.io/v1beta1",
```

#### kubeproxy Dockerfile for Ambassador
```Dockerfile
FROM alpine
RUN apk update && apk add curl && curl -L -O https://dl.k8s.io/v1.8.0/kubernetes-client-linux-amd64.tar.gz && tar zvxf kubernetes-client-linux-amd64.tar.gz kubernetes/client/bin/kubectl && mv kubernetes/client/bin/kubectl / && rm -rf kubernetes && rm -f kubernetes-client-linux-amd64.tar.gz
ADD kubectl-proxy.sh /kubectl-proxy.sh
ENTRYPOINT /kubectl-proxy.sh
```

#### kube-proxy.sh for Ambassador
```
#!/bin/sh

API_SERVER="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT"
CA_CRT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"

/kubectl proxy --server="$API_SERVER" --certificate-authority="$CA_CRT" --token="$TOKEN" --accept-paths='^.*'
```

### 고려사항
1. 시크릿을 컨터에니에 전달할 때 환경 변수로 제공하게 되면 의도치 않게 로그에 남을 수 있으므로 되도록이면 시크릿은 환경변수로 전달하지 않아야 함