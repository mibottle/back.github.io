---
layout: post
title: How to create an AuthZ Group in kubernetes
date: 2019-09-19
categories: Kubernetes
tags: [A kubernetes, group, team, role, rolebinding]
author: himang10
description: K8s의 Github와 연동하여 AuthN과 AuthZ 지원하기 위한 방번 섦영
---

# k8s AuthN and AuthZ 

## Role 과 RoleBinding에 대한 정의
github의 TEAM을 이용하여 그룹 설정하고 github 인증을 통해 인증 및 접근 통제할 수 있도록 구성
본 문서에서는 [appscode/guard](https://github.com/appscode/guard)을 이용하여 github와 연결하기로 한다

#### Role
Role은 API/Resource별 권한을 설정하는 리소스
```yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" 는 Core API 를 의미합니다.
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
```

role 검색
> $kubectl get role --all-namespaces
> $kubectl get role my-role -n my-namespace -o ymal

#### Role Binding
Jane이라는 User에게 pod-reader ROLE을 binding하는 객체

```yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: User
  name: jane # 이름은 대소문자를 구별합니다.
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role # Role 또는 ClusterRole을 지정할 수 있습니다.
  name: pod-reader # 실제 존재하는 역할과 매치되어야 합니다.
  apiGroup: rbac.authorization.k8s.io
```
# AuthN
## cluster-admin 권한 할당 
#### 전제조건: Gibhub TEAM 생성하기
[appscode/guard](https://github.com/appscode/guard)를 우선 설치한다.

Guard는 guard server와 kubernetes api server간 통신 보안을 위해 TLS Client certs를 사용한다.
Guard는 어떤 auth provider(git, ldap, google ...)을 identify하기 위해 client certificate로 ***CommonName***과 ***Organization***을 사용할 수 있다.

##### 서버용 인증서
> $guard init ca
> $guard init server --ips=100.64.10.96 
[guard install page](https://appscode.com/products/guard/0.2.0/setup/install/)를 참조해서 진행하면된다.

```yaml
# initialize self signed ca
$ guard init ca
Wrote ca certificates in  /home/tamal/.guard/pki

# generate server certificate pair
$ guard init server --ips=10.96.10.96
Wrote server certificates in  /home/tamal/.guard/pki

# generate client certificate pair for Github organization `appscode`
$ guard init client appscode -o github
Wrote client certificates in  /home/tamal/.guard/pki

$ guard init client appscode.com -o google
Wrote client certificates in  /home/tamal/.guard/pki

$ guard init client qacode -o appscode
Wrote client certificates in  /home/tamal/.guard/pki

# generate client certificate pair for Gitlab
$ guard init client -o gitlab
Wrote client certificates in  /home/tamal/.guard/pki

# for azure, commonName is optional
$ guard init client -o azure
Wrote client certificates in  /home/tamal/.guard/pki

# generate client certificate pair for LDAP
$ guard init client appscode -o ldap
Wrote client certificates in  /home/tamal/.guard/pki

$ ls -l /home/tamal/.guard/pki
total 32
-rwxr-xr-- 1 tamal tamal 1054 Aug 28 07:42 qacode@appscode.crt
-rw------- 1 tamal tamal 1679 Aug 28 07:42 qacode@appscode.key
-rwxr-xr-- 1 tamal tamal 1054 Aug 28 07:42 appscode.com@google.crt
-rw------- 1 tamal tamal 1679 Aug 28 07:42 appscode.com@google.key
-rwxr-xr-- 1 tamal tamal 1050 Aug 28 07:12 appscode@github.crt
-rw------- 1 tamal tamal 1675 Aug 28 07:12 appscode@github.key
-rwxr-xr-- 1 tamal tamal 1050 Aug 28 07:12 gitlab@gitlab.crt
-rw------- 1 tamal tamal 1675 Aug 28 07:12 gitlab@gitlab.key
-rwxr-xr-- 1 tamal tamal 1050 Aug 28 07:12 azure@azure.crt
-rw------- 1 tamal tamal 1675 Aug 28 07:12 azure@azure.key
-rwxr-xr-- 1 tamal tamal 1050 Aug 28 07:12 ldap@ldap.crt
-rw------- 1 tamal tamal 1675 Aug 28 07:12 ldap@ldap.key
-rwxr-xr-- 1 tamal tamal 1005 Aug 28 07:12 ca.crt
-rw------- 1 tamal tamal 1675 Aug 28 07:12 ca.key
-rwxr-xr-- 1 tamal tamal 1046 Aug 28 07:12 server.crt
-rw------- 1 tamal tamal 1675 Aug 28 07:12 server.key
```
##### Client용 인증서
> guard init client your-org -o github
여기에서 your-org는 사용하고자 하는 org name으로 변경 해야 함. ex) Rainist
> $ls ~/.guard/pki
총 6개의 파일이 생성된다. 

```filename
* your-org@github.crt
* your-org@github.key
* ca.crt
* ca.key
* server.crt
* server.key
```
##### 인증서를 이용하여 서버 띄위기
먼저 서버 띄우기 위해 
> $ guard get installer --auth-providers=github > installer.yaml
> #installer.yaml 의 spec.clusterIP 의 값을 100.64.10.96 (서버 IP)으로 변경 후
> $ kubectl apply -f installer.yaml

##### k8s가 webhook 인증방식을 사용할 수 있도록 설정 변경
kubeadm을 이용하여 config 설정 변경

```yaml
spec:
  kubeAPIServer:
    authenticationTokenWebhookConfigFile: /srv/kubernetes/webhook-guard-config
  fileAssets:
  - content: |
       (guard get webhook-config your-org -o github --addr=100.64.10.96:443 의 결과)
    name: guard-github-auth
    path: /srv/kubernetes/webhook-guard-config
    roles:
    - Master
```
설정 변경 후 master node를 재시작해야 함

##### kubectl config 파일을 수정하여 gibhub team을 이용하여 Authn 실행
기존 config는 admin용 credentials 가 포함되어 있음. 이를 Github TEAM에 설정된 팀원으로 인증할 수 있도록 변경할 것입니다.

```config
# config
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: ...
    server: https://my.cluster.server
  name: my.cluster.k8s.local
contexts:
- context:
    cluster: my.cluster.k8s.local
    user: my-github-token
  name: my.cluster.k8s.local
current-context: my.cluster.k8s.local
kind: Config
preferences: {}
users:
- name: my-github-token
  user:
    token: {github-token}
```
* `users.name`은 임의로 이름을 정하고 `contexts.context.user`와 동일하게 정의
* ***token***은 https://github.com/settings/tokens/new 에 접속하여 
  > select scope
  > > admin:org
  > > > read:org
  만 체크한 후 ***Generate Token***을 눌러서 토큰 발급받아 ***user.token** 항목에 설정

이후 
> $kubectl cluster-info
실행을 통해 에러 메시지가 없으면 성공한 것이다.


## AuthZ 관리
### github team (admin-k8s)와 cluster-admin binding 하기
https://github.com/orgs/{my-org}/new-team에 접속하여 새로운 팀을 만들어준다.
여기서는 ***admin-k8s***로 설정한다.
##### Team 만드는 방법

```

```
cluster-admin은 cluster 내 모든 것을 할 수 있는 권한 할당 의미
> $kubectl get clusterrole cluster-admin -o yaml

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: 2018-07-30T08:28:45Z
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: cluster-admin
  resourceVersion: "38"
  selfLink: /apis/rbac.authorization.k8s.io/v1/clusterroles/cluster-admin
  uid: 92ece2ce-93d2-11e8-8fe9-06a3ca3741bb
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:

  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
```
Cluster-admin ClusterRole에 ClusterRoleBinding을 실행
github의 team으로 그루핑한다.

아래의 yaml을 생성
> $kubectl create -f admin-k8s-team-rb.yaml
```yaml
# admin-k8s-team-rb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-k8s-team
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group # Group 이라고 지정함으로써 Github Team을 가르켰습니다.
  name: admin-k8s # 대소문자를 구별함으로 주의해주세요
```
admin-k8s team은 group으로 설정되어 있으며, cluster-admin으로 바인딩됨
그리고 `~/.kube/config` 파일에 `users:`에 추가
```
users:
- name: my-github-token  # 임의로 지정할 수 있으며, context와 일치해야 함
  user:
    token: {github token value}
```
context 항목도 아래와 같이 변경하여 Github credential을 사용하도록 변경
```
- context:
    cluster: my.cluster.k8s.local
    user: my-github-token   # users에 등록된 이름이며, 위의 user와 일치해야 함
```
이렇게 설정 후 
> $kubectl get nodes 실행 시 정상적으로 실행된다면 
***Github team + Guard + RBAC**를 이요한 인증에 성공

### ICP의 TEAM 작동 방식 이해 및 교체 방법
